@implements IDisposable

@inject BasicTwoPersonChessService service


@if(WasColorSelected == false)
{
    <div>
        <span>What Color are you playing?</span>
        <button type=button @onclick="() => SetColor(PLAYER.WHITE)">White</button>
        <button type=button @onclick="() => SetColor(PLAYER.BLACK)">Black</button>
    </div>

}
else
{
    <table id="BoardTable">
        @foreach(int r in RowRange())
        {
            <tr>
                @foreach(int c in ColRange())
                {
                    var lr = r;
                    var lc = c;

                    <td class="@CellClasses(r,c)"><div class="cellContent @CellContentClasses(r,c)" @onclick="() => CellClicked(lr,lc)">
                    @if(state.PieceAt(r,c) != PIECE.NONE)
                    {
                        <img class="PieceImg" src="@PieceImageString(state.PieceAt(r,c))" />
                    }
                    </div></td>
                }
            </tr>
        }
    </table>
    <div>@TurnIndictor</div>

    <div style="margin-top: 10px">
        <button type="button" @onclick="@NewGame">New Game</button>
    </div>
}

@code
{

    BoardState state
    {
        get
        {
            return service.State;
        }
    }

    bool WasColorSelected = false;
    PLAYER Selected = PLAYER.WHITE;

    Location lastClickedLocation = new Location(-1,-1);
    List<Location> possibleMoveLocations = new();

    string TurnIndictor
    {
        get
        {
           return (service.State.CurrentTurn == PLAYER.WHITE) ? "White's turn" : "Black's turn";
        }
    }


    protected override void OnInitialized()
    {
        service.DataUpdated += OnDataHasChanged;
    }


    void SetColor(PLAYER p)
    {
        Selected = p;
        WasColorSelected = true;
    }

    void NewGame()
    {
        service.NewGame();
    }

    int[] RowRange()
    {
        if(Selected == PLAYER.WHITE)
            return new int[]{7,6,5,4,3,2,1,0};
        else
            return new int[]{0,1,2,3,4,5,6,7};
    }

    int[] ColRange()
    {
        if(Selected == PLAYER.WHITE)
            return new int[]{0,1,2,3,4,5,6,7};
        else
            return new int[]{7,6,5,4,3,2,1,0};

    }



    void CellClicked(int r, int c)
    {
        if(service.State.CurrentTurn != Selected)
            return;

        Location newLocation = new Location(r,c);

        var moveMade = service.MakeMove(new Move(lastClickedLocation, newLocation));

        if(moveMade)
            lastClickedLocation = new Location(-1,-1);
        else
            lastClickedLocation = newLocation;

        Update();
    }

    void Update()
    {
        SetPossibleMoveSquares();
    }

    void SetPossibleMoveSquares()
    {
        var moves = service.State.PossibleMovesForLocation(lastClickedLocation);

        possibleMoveLocations = new();
        foreach(var m in moves)
        {
            possibleMoveLocations.Add(m.End);
        }
    }

    string CellClasses(int r, int c)
    {
        string classes = "";
        classes += ((r+c)%2 == 0) ? "evenCell " : "oddCell ";

        return classes;
    }

    string CellContentClasses(int r, int c)
    {
        Location contentLocation = new(r,c);

        string classes = "";

        if(lastClickedLocation == contentLocation)
            classes += "cellSelected ";
        if(possibleMoveLocations.Contains(contentLocation))
            classes += "cellPossible ";

        return classes;
    }

    string PieceImageString(PIECE p)
    {
        var pieceName = "";
        if(p == PIECE.WHITE_KING) pieceName = "wk";
        if(p == PIECE.WHITE_QUEEN) pieceName = "wq";
        if(p == PIECE.WHITE_BISHOP) pieceName = "wb";
        if(p == PIECE.WHITE_KNIGHT) pieceName = "wn";
        if(p == PIECE.WHITE_ROOK) pieceName = "wr";
        if(p == PIECE.WHITE_PAWN) pieceName = "wp";
        if(p == PIECE.BLACK_KING) pieceName = "bk";
        if(p == PIECE.BLACK_QUEEN) pieceName = "bq";
        if(p == PIECE.BLACK_BISHOP) pieceName = "bb";
        if(p == PIECE.BLACK_KNIGHT) pieceName = "bn";
        if(p == PIECE.BLACK_ROOK) pieceName = "br";
        if(p == PIECE.BLACK_PAWN) pieceName = "bp";
        return $"_content/ChessLibrary.Blazor/chessPieces/{pieceName}.svg";
    }


    public void OnDataHasChanged()
    {
        InvokeAsync(() => StateHasChanged());
    }


    bool _disposed = false;
    public void Dispose()
    {
        if(_disposed == false)
        {
            service.DataUpdated += OnDataHasChanged;

            _disposed = true;
        }
    }


}
