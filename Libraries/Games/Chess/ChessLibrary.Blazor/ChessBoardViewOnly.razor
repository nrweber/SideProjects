<div id="OuterBoardDiv">
    <table id="BoardTable">
        @for(int r = 7; r >= 0; r--)
        {
            <tr>
                @for(int c = 0; c <= 7; c++)
                {
                    var lr = r;
                    var lc = c;

                    <td class="@CellClasses(r,c)"><div class="cellContent" >
                    @if(state.PieceAt(r,c) != PIECE.NONE)
                    {
                        <img class="PieceImg" src="@PieceImageString(state.PieceAt(r,c))" />
                    }
                    </div></td>
                }
            </tr>
        }
    </table>
</div>
<div>@TurnIndictor</div>

@code
{
    [Parameter]
    public string FEN { get; set; } = "";

    BoardState state = new();


    string TurnIndictor = "White's turn";

    protected override void OnInitialized()
    {
        (_, state) = BoardState.ToBoardState(FEN);

        TurnIndictor = (state.CurrentTurn == PLAYER.WHITE) ? "White's turn" : "Black's turn";
    }

    string CellClasses(int r, int c)
    {
        string classes = "";
        classes += ((r+c)%2 == 0) ? "evenCell " : "oddCell ";

        return classes;
    }

    string PieceImageString(PIECE p)
    {
        var pieceName = "";
        if(p == PIECE.WHITE_KING) pieceName = "wk";
        if(p == PIECE.WHITE_QUEEN) pieceName = "wq";
        if(p == PIECE.WHITE_BISHOP) pieceName = "wb";
        if(p == PIECE.WHITE_KNIGHT) pieceName = "wn";
        if(p == PIECE.WHITE_ROOK) pieceName = "wr";
        if(p == PIECE.WHITE_PAWN) pieceName = "wp";
        if(p == PIECE.BLACK_KING) pieceName = "bk";
        if(p == PIECE.BLACK_QUEEN) pieceName = "bq";
        if(p == PIECE.BLACK_BISHOP) pieceName = "bb";
        if(p == PIECE.BLACK_KNIGHT) pieceName = "bn";
        if(p == PIECE.BLACK_ROOK) pieceName = "br";
        if(p == PIECE.BLACK_PAWN) pieceName = "bp";
        return $"_content/ChessLibrary.Blazor/chessPieces/{pieceName}.svg";
    }

}
