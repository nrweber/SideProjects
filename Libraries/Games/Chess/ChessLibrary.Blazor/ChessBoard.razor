<div id="OuterBoardDiv">
    <div id="WhitePromotionDiv" class="@((WhitePromotionPicking) ? "selecting" : "")">
        <div id="PromotionInnerDiv">
            <img src="@PieceImageString(PIECE.WHITE_QUEEN)" @onclick="() => PromotionSelected(PROMOTION_PIECE.QUEEN)" />
            <img src="@PieceImageString(PIECE.WHITE_ROOK)" @onclick="() => PromotionSelected(PROMOTION_PIECE.ROOK)" />
            <img src="@PieceImageString(PIECE.WHITE_BISHOP)" @onclick="() => PromotionSelected(PROMOTION_PIECE.BISHOP)" />
            <img src="@PieceImageString(PIECE.WHITE_KNIGHT)" @onclick="() => PromotionSelected(PROMOTION_PIECE.KNIGHT)" />
        </div>
    </div>
    <div id="BlackPromotionDiv" class="@((BlackPromotionPicking) ? "selecting" : "")">
        <div id="PromotionInnerDiv">
            <img src="@PieceImageString(PIECE.BLACK_QUEEN)" @onclick="() => PromotionSelected(PROMOTION_PIECE.QUEEN)" />
            <img src="@PieceImageString(PIECE.BLACK_ROOK)" @onclick="() => PromotionSelected(PROMOTION_PIECE.ROOK)" />
            <img src="@PieceImageString(PIECE.BLACK_BISHOP)" @onclick="() => PromotionSelected(PROMOTION_PIECE.BISHOP)" />
            <img src="@PieceImageString(PIECE.BLACK_KNIGHT)" @onclick="() => PromotionSelected(PROMOTION_PIECE.KNIGHT)" />
        </div>
    </div>
    <table id="BoardTable">
        @for(int r = 7; r >= 0; r--)
        {
            <tr>
                @for(int c = 0; c <= 7; c++)
                {
                    var lr = r;
                    var lc = c;

                    <td class="@CellClasses(r,c)"><div class="cellContent @CellContentClasses(r,c)" @onclick="() => CellClicked(lr,lc)">
                    @if(state.PieceAt(r,c) != PIECE.NONE)
                    {
                        <img class="PieceImg" src="@PieceImageString(state.PieceAt(r,c))" />
                    }
                    </div></td>
                }
            </tr>
        }
    </table>
</div>
<div>@TurnIndictor</div>

@code
{
    BoardState state = new();

    Location? lastClickedLocation = null;
    Location? promotionEndLocation = null;
    List<Location> possibleMoveLocations = new();


    bool WhitePromotionPicking = false;
    bool BlackPromotionPicking = false;



    string TurnIndictor = "White's turn";


    bool IsPromoting(BoardState game, Location start, Location end)
    {
        PIECE pieceAtStartLocation = game.PieceAt(start.Row, start.Column);

        if(game.CurrentTurn == PLAYER.WHITE) 
        {
            if( pieceAtStartLocation != PIECE.WHITE_PAWN 
                || start.Row != 6
                || end.Row != 7
            )
            {
                return false;
            }
            return true;
        }
        else
        {
            if( pieceAtStartLocation != PIECE.BLACK_PAWN 
                || start.Row != 1
                || end.Row != 0
            )
            {
                return false;
            }
            return true;
        }

    }


    void CellClicked(int r, int c)
    {
        Location newLocation = new Location(r,c);
        
        if(lastClickedLocation == null || WhitePromotionPicking || BlackPromotionPicking)
        {
            lastClickedLocation = newLocation;
            WhitePromotionPicking = false;
            BlackPromotionPicking = false;
            promotionEndLocation = null;
        }
        else if(IsPromoting(state, (Location)lastClickedLocation, newLocation))
        {
            if(state.CurrentTurn == PLAYER.WHITE)
            {
                WhitePromotionPicking = true;
            }
            else
            {
                BlackPromotionPicking = true;
            }
            promotionEndLocation = newLocation;
        }
        else
        {
            (bool moved, state) = ChessHelper.MakeMove(state, new Move((Location)lastClickedLocation, newLocation));

            if(moved)
                lastClickedLocation = null;
            else
                lastClickedLocation = newLocation;
        }

        Update();
    }


    void PromotionSelected(PROMOTION_PIECE selectedPiece)
    {
        // If one of these are null somehow, don't try to make the move
        if(lastClickedLocation != null && promotionEndLocation != null)
            (_, state) = ChessHelper.MakeMove(state, new Move((Location)lastClickedLocation, (Location)promotionEndLocation, selectedPiece));


        WhitePromotionPicking = false;
        BlackPromotionPicking = false;
        promotionEndLocation = null;
        lastClickedLocation = null;
        Update();
    }

    void Update()
    {
        SetTurnText();
        SetPossibleMoveSquares();
    }

    void SetTurnText()
    {
        TurnIndictor = (state.CurrentTurn == PLAYER.WHITE) ? "White's turn" : "Black's turn";
    }

    void SetPossibleMoveSquares()
    {
        possibleMoveLocations = new();

        if(lastClickedLocation == null)
            return;

        var moves = ChessHelper.PossibleMovesForLocation(state, (Location)lastClickedLocation);

        foreach(var m in moves)
        {
            possibleMoveLocations.Add(m.End);
        }
    }

    string CellClasses(int r, int c)
    {
        string classes = "";
        classes += ((r+c)%2 == 0) ? "evenCell " : "oddCell ";

        return classes;
    }

    string CellContentClasses(int r, int c)
    {
        Location contentLocation = new(r,c);

        string classes = "";

        if(lastClickedLocation == contentLocation)
            classes += "cellSelected ";
        if(possibleMoveLocations.Contains(contentLocation))
            classes += "cellPossible ";

        return classes;
    }

    string PieceImageString(PIECE p)
    {
        var pieceName = "";
        if(p == PIECE.WHITE_KING) pieceName = "wk";
        if(p == PIECE.WHITE_QUEEN) pieceName = "wq";
        if(p == PIECE.WHITE_BISHOP) pieceName = "wb";
        if(p == PIECE.WHITE_KNIGHT) pieceName = "wn";
        if(p == PIECE.WHITE_ROOK) pieceName = "wr";
        if(p == PIECE.WHITE_PAWN) pieceName = "wp";
        if(p == PIECE.BLACK_KING) pieceName = "bk";
        if(p == PIECE.BLACK_QUEEN) pieceName = "bq";
        if(p == PIECE.BLACK_BISHOP) pieceName = "bb";
        if(p == PIECE.BLACK_KNIGHT) pieceName = "bn";
        if(p == PIECE.BLACK_ROOK) pieceName = "br";
        if(p == PIECE.BLACK_PAWN) pieceName = "bp";
        return $"_content/ChessLibrary.Blazor/chessPieces/{pieceName}.svg";
    }

}
